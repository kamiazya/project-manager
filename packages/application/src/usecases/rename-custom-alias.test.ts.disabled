import { describe, it, expect, beforeEach, vi } from 'vitest'
import { RenameCustomAliasUseCase } from './rename-custom-alias.ts'
import type { TicketRepository } from '../repositories/ticket-repository.ts'
import { createTestTicket } from '../common/test-helpers.ts'

describe('RenameCustomAliasUseCase', () => {
  let useCase: RenameCustomAliasUseCase
  let mockRepository: TicketRepository

  beforeEach(() => {
    mockRepository = {
      save: vi.fn(),
      findById: vi.fn(),
      queryTickets: vi.fn(),
      delete: vi.fn(),
      findByAlias: vi.fn(),
      isAliasAvailable: vi.fn(),
      getAllAliases: vi.fn(),
      findTicketsWithAliases: vi.fn()
    }
    useCase = new RenameCustomAliasUseCase(mockRepository)
  })

  describe('successful operations', () => {
    it('should successfully rename custom alias', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('old-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)
      mockRepository.queryTickets = vi.fn().mockResolvedValue([])

      // Act
      await useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'old-alias',
        newAlias: 'new-alias'
      })

      // Assert
      expect(ticket.getCustomAliases()).not.toContain('old-alias')
      expect(ticket.getCustomAliases()).toContain('new-alias')
      expect(mockRepository.save).toHaveBeenCalledWith(ticket)
    })

    it('should not throw error when old alias does not exist', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('existing-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)
      mockRepository.queryTickets = vi.fn().mockResolvedValue([])

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'non-existing-alias',
        newAlias: 'new-alias'
      })).resolves.not.toThrow()

      expect(ticket.getCustomAliases()).toContain('existing-alias')
      expect(ticket.getCustomAliases()).toContain('new-alias')
      expect(mockRepository.save).toHaveBeenCalledWith(ticket)
    })
  })

  describe('error cases', () => {
    it('should throw error when ticket not found', async () => {
      // Arrange
      mockRepository.findById = vi.fn().mockResolvedValue(null)

      // Act & Assert
      await expect(useCase.execute({
        ticketId: 'non-existing-id',
        oldAlias: 'old-alias',
        newAlias: 'new-alias'
      })).rejects.toThrow('Ticket not found')
    })

    it('should throw error when trying to rename canonical alias', async () => {
      // Arrange
      const ticket = createTestTicket()
      const canonicalAlias = ticket.getCanonicalAlias()
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: canonicalAlias!,
        newAlias: 'new-alias'
      })).rejects.toThrow(Error)
    })

    it('should throw error when renaming to same alias name', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('same-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'same-alias',
        newAlias: 'same-alias'
      })).rejects.toThrow(Error)
    })

    it('should throw error when new alias already exists', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('old-alias')
      ticket.addCustomAlias('existing-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'old-alias',
        newAlias: 'existing-alias'
      })).rejects.toThrow(Error)
    })

    it('should throw error when new alias conflicts with canonical alias', async () => {
      // Arrange
      const ticket = createTestTicket()
      const canonicalAlias = ticket.getCanonicalAlias()
      ticket.addCustomAlias('old-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'old-alias',
        newAlias: canonicalAlias!
      })).rejects.toThrow(Error)
    })

    it('should throw error when new alias conflicts with other ticket alias', async () => {
      // Arrange
      const ticket1 = createTestTicket()
      ticket1.addCustomAlias('old-alias')
      
      const ticket2 = createTestTicket()
      ticket2.addCustomAlias('existing-external-alias')
      
      mockRepository.findById = vi.fn().mockResolvedValue(ticket1)
      mockRepository.queryTickets = vi.fn().mockResolvedValue([ticket1, ticket2])

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket1.id.value,
        oldAlias: 'old-alias',
        newAlias: 'existing-external-alias'
      })).rejects.toThrow(Error)
    })

    it('should throw error when new alias conflicts with other ticket canonical alias', async () => {
      // Arrange
      const ticket1 = createTestTicket()
      ticket1.addCustomAlias('old-alias')
      
      const ticket2 = createTestTicket()
      const ticket2CanonicalAlias = ticket2.getCanonicalAlias()
      
      mockRepository.findById = vi.fn().mockResolvedValue(ticket1)
      mockRepository.queryTickets = vi.fn().mockResolvedValue([ticket1, ticket2])

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket1.id.value,
        oldAlias: 'old-alias',
        newAlias: ticket2CanonicalAlias!
      })).rejects.toThrow(Error)
    })

    it('should throw error for invalid alias format', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('old-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'old-alias',
        newAlias: '' // empty string
      })).rejects.toThrow(Error)

      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'old-alias',
        newAlias: 'invalid alias with spaces' // contains spaces
      })).rejects.toThrow(Error)
    })
  })

  describe('edge cases', () => {
    it('should atomically remove old alias and add new alias', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('alias1')
      ticket.addCustomAlias('alias2')
      ticket.addCustomAlias('target-alias')
      
      const initialAliasCount = ticket.getCustomAliases().length
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)
      mockRepository.queryTickets = vi.fn().mockResolvedValue([ticket])

      // Act
      await useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'target-alias',
        newAlias: 'renamed-alias'
      })

      // Assert
      expect(ticket.getCustomAliases()).not.toContain('target-alias')
      expect(ticket.getCustomAliases()).toContain('renamed-alias')
      expect(ticket.getCustomAliases()).toContain('alias1')
      expect(ticket.getCustomAliases()).toContain('alias2')
      expect(ticket.getCustomAliases()).toHaveLength(initialAliasCount) // count remains same
    })

    it('should propagate repository errors', async () => {
      // Arrange
      const ticket = createTestTicket()
      ticket.addCustomAlias('old-alias')
      mockRepository.findById = vi.fn().mockResolvedValue(ticket)
      mockRepository.queryTickets = vi.fn().mockResolvedValue([])
      mockRepository.save = vi.fn().mockRejectedValue(new Error('Repository error'))

      // Act & Assert
      await expect(useCase.execute({
        ticketId: ticket.id.value,
        oldAlias: 'old-alias',
        newAlias: 'new-alias'
      })).rejects.toThrow('Repository error')
    })
  })
})